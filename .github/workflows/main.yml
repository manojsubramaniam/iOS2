name: iOS starter workflow
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

jobs:
  build:
    name: Build and Test default scheme using any available iPhone simulator
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: check Xcode version
        run: /usr/bin/xcodebuild -version

      - name: Install the Apple certificate and provisioning profile
        env:
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        run: |
          # Copy the certificate and provisioning profile to the correct locations
          cp Certificates.p12 $RUNNER_TEMP/build_certificate.p12
          cp DemoTest.mobileprovision $RUNNER_TEMP/build_pp.mobileprovision

          # Convert Mobile Provision to Base64
          MOBILE_PROVISION_CONTENT=$(cat $RUNNER_TEMP/build_pp.mobileprovision | base64)
          echo "::set-output name=mobile_provision_content::${MOBILE_PROVISION_CONTENT}"

          # Import the certificate to the user keychain
          security import $RUNNER_TEMP/build_certificate.p12 -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k ~/Library/Keychains/login.keychain-db
          security list-keychain -d user -s ~/Library/Keychains/login.keychain-db

          # Apply the provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $RUNNER_TEMP/build_pp.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles
      - name: check Xcode version
        run: /usr/bin/xcodebuild -version

      - name: Copy Podfile
        run: cp -r SignIn/Podfile .

      - name: Install CocoaPods
        run: |
          sudo gem install cocoapods -v '1.11.2'
          pod repo list
          pod setup

      - name: Cache CocoaPods dependencies
        uses: actions/cache@v2
        with:
          path: Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('SignIn/Podfile.lock') }}

      - name: Install dependencies
        run: pod install --project-directory=SignIn/

      - name: Check current directory
        run: |
          pwd
          ls -al

      - name: Navigate to SignIn folder
        run: |
          cd SignIn/
          ls

      - name: Update provisioning profile specifier in Xcode project
        run: |
          gem install xcodeproj
          ruby - <<EOF
          require 'xcodeproj'

          # Define the path to your Xcode project
          project_path = 'SignIn/SignIn.xcodeproj'

          # Define the target name
          target_name = 'SignIn'

          # Define the provisioning profile specifier
          provisioning_profile_specifier = "DemoTest"

          # Open the Xcode project
          project = Xcodeproj::Project.open(project_path)

          # Find the target
          target = project.targets.find { |t| t.name == target_name }

          # Update the provisioning profile settings
          target.build_configuration_list.build_configurations.each do |configuration|
            configuration.build_settings['PROVISIONING_PROFILE_SPECIFIER'] = provisioning_profile_specifier
          end

          # Save the changes to the Xcode project file
          project.save
          EOF
          
      - name: Read Mobile Provision Content
        id: read-mobile-provision
        run: |
          # Get the mobile provision content from the previous step's output
          mobileprovision_content="${{ steps.read-mobile-provision.outputs.mobile_provision_content }}"

          # Encode the content to base64
          mobileprovision_base64=$(echo -n "${mobileprovision_content}" | base64)

          # Store the result in an output variable
          echo "::set-output name=base64_output::${mobileprovision_base64}"


      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'  # Use the desired Python version
    
      - name: Convert Mobile Provision to Base64
        id: convert-to-base64
        run: |
          # Get the mobile provision content from the previous step's output
          mobileprovision_content="${{ steps.read-mobile-provision.outputs.mobile_provision_content }}"

          # Encode the content to base64 and remove line breaks
          mobileprovision_base64=$(echo "$mobileprovision_content" | base64 | tr -d '\n')

          # Store the result in an output variable
          echo "::set-output name=base64_output::$mobileprovision_base64"


      - name: Use the Base64 in the Workflow
        run: |
          # Get the base64-encoded mobile provision from the previous step's output
          base64_value="${{ steps.convert-to-base64.outputs.base64_output }}"

          # Now you can use the $base64_value variable in your further workflow steps
          echo "The base64 value is $base64_value"

        # Use the base64 value in the 'env' section of your existing workflow (remove '***' and replace with the actual base64 value)
        env:
          MOBILEPROVISION_BASE64: ${{ steps.convert-to-base64.outputs.base64_output }}

      - name: Build and Export iOS App
        uses: yukiarrr/ios-build-action@v1.11.0
        with:
          project-path: SignIn/SignIn.xcodeproj
          p12-base64: ${{ secrets.P12_PASSWORD }}
          code-signing-identity: ${{ secrets.CODE_SIGNING_IDENTITY }}
          team-id: ${{ secrets.TEAM_ID }}
          workspace-path: SignIn/SignIn.xcworkspace
          export-method: development
          configuration: Release
          output-path: output.ipa
          custom-keychain-name: ios-build.keychain
          export-options: ExportOptions.plist
